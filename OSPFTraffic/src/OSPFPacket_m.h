//
// Generated file, do not edit! Created by opp_msgtool 6.1 from OSPFPacket.msg.
//

#ifndef __OSPFTRAFFIC_OSPFPACKET_M_H
#define __OSPFTRAFFIC_OSPFPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace ospftraffic {

class OSPFPacket;

}  // namespace ospftraffic


namespace ospftraffic {

/**
 * Class generated from <tt>OSPFPacket.msg:17</tt> by opp_msgtool.
 * <pre>
 * message OSPFPacket
 * {
 *     int srcId;
 *     int destId;
 *     string payload;
 *     string hopTrace[];  // dynamic array to store router hop names
 * }
 * </pre>
 */
class OSPFPacket : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = 0;
    ::omnetpp::opp_string payload;
    ::omnetpp::opp_string *hopTrace = nullptr;
    size_t hopTrace_arraysize = 0;

  private:
    void copy(const OSPFPacket& other);

  protected:
    bool operator==(const OSPFPacket&) = delete;

  public:
    OSPFPacket(const char *name=nullptr, short kind=0);
    OSPFPacket(const OSPFPacket& other);
    virtual ~OSPFPacket();
    OSPFPacket& operator=(const OSPFPacket& other);
    virtual OSPFPacket *dup() const override {return new OSPFPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);

    virtual void setHopTraceArraySize(size_t size);
    virtual size_t getHopTraceArraySize() const;
    virtual const char * getHopTrace(size_t k) const;
    virtual void setHopTrace(size_t k, const char * hopTrace);
    virtual void insertHopTrace(size_t k, const char * hopTrace);
    [[deprecated]] void insertHopTrace(const char * hopTrace) {appendHopTrace(hopTrace);}
    virtual void appendHopTrace(const char * hopTrace);
    virtual void eraseHopTrace(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OSPFPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OSPFPacket& obj) {obj.parsimUnpack(b);}


}  // namespace ospftraffic


namespace omnetpp {

template<> inline ospftraffic::OSPFPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ospftraffic::OSPFPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OSPFTRAFFIC_OSPFPACKET_M_H

